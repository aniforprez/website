---
import type { MarkdownHeading } from "astro";

import TableOfContentsHeading from "./TableOfContentsHeading.astro";

import generateToc from "./generateToc";

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;
const filteredHeadings = generateToc(headings.filter((h) => h.depth <= 3));
---

<table-of-contents>
  <nav id="toc" class="overflow-y-auto">
    <h2 class="border-theme border-b py-2 text-lg font-semibold">
      Table of Contents
    </h2>
    <ul class="list-inside py-2">
      {
        filteredHeadings.map((heading) => (
          <TableOfContentsHeading heading={heading} />
        ))
      }
    </ul>
  </nav>
</table-of-contents>

<script>
  const setCurrentHeading: IntersectionObserverCallback = (entries) => {
    // loop to each section in the page
    for (let entry of entries) {
      // Get the heading of the section
      const heading =
        entry.target.querySelector<HTMLHeadingElement>("h2,h3,h4,h5");
      if (!heading) return;

      const id = heading.getAttribute("id");

      // check if the entry is intersecting
      if (entry.isIntersecting) {
        // remove active class from all links
        // add active class to the currently active entry
        document
          .querySelector(`#toc li a[href='#${id}']`)
          ?.classList.add("not-dark:text-stone-800", "dark:text-stone-200");
      } else {
        document
          .querySelector(`#toc li a[href='#${id}']`)
          ?.classList.remove("not-dark:text-stone-800", "dark:text-stone-200");
      }
    }
  };

  customElements.define(
    "table-of-contents",
    class extends HTMLElement {
      connectedCallback() {
        const observer = new IntersectionObserver(setCurrentHeading);
        // select all headings to observe
        const elToObserve = document.querySelectorAll("article section");
        // finally, observe the elements
        elToObserve.forEach((el) => observer.observe(el));
      }
    },
  );
</script>
