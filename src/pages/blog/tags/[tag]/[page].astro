---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";

import Pagination from "../../../../components/Pagination.astro";
import BaseLayout from "../../../../layouts/BaseLayout.astro";

import BlogPostListEntry from "../../../../components/BlogPostListEntry.astro";
import { BLOG_DESCRIPTION, SITE_SUFFIX } from "../../../../consts";

export const getStaticPaths = (async ({ paginate }) => {
  const blog_posts = (await getCollection("blog"))
    .filter((post) => !post.data.draft)
    .sort(
      (a, b) =>
        (b.data.pubDate?.valueOf() || 0) - (a.data.pubDate?.valueOf() || 0),
    );
  const review_posts = (await getCollection("reviews"))
    .filter((post) => !post.data.draft)
    .sort(
      (a, b) =>
        (b.data.pubDate?.valueOf() || 0) - (a.data.pubDate?.valueOf() || 0),
    );

  const uniqueTags = [
    ...new Set(blog_posts.map((post) => post.data.categories).flat()),
    ...new Set(review_posts.map((post) => post.data.categories).flat()),
  ].filter((tag) => tag !== undefined);

  return uniqueTags.flatMap((tag) => {
    const filteredPosts = [
      ...blog_posts.filter((post) => post.data.categories?.includes(tag)),
      ...review_posts.filter((post) => post.data.categories?.includes(tag)),
    ];
    return paginate(filteredPosts, { params: { tag }, pageSize: 10 });
  });
}) satisfies GetStaticPaths;

const { tag } = Astro.params;
const { page } = Astro.props;
---

<BaseLayout
  title={`Tag: ${tag}` + SITE_SUFFIX}
  description={`Tag ${tag} on ` + BLOG_DESCRIPTION}
>
  <div>
    <div class="border-theme container m-auto border-x p-12 sm:justify-start">
      <h1 class="font-cursive border-theme text-3xl font-semibold">
        <span>{`#${tag}`}</span>
      </h1>
    </div>
  </div>
  <div>
    <section
      class="border-theme relative container m-auto flex min-h-lvh w-full flex-col items-start border-x p-0 md:flex-row"
    >
      <ul
        class="border-theme grid w-full grid-cols-1 lg:grid-cols-2 lg:border-r"
      >
        {
          page.data.map((post) => (
            <li class="border-theme border-b hover:z-1 hover:shadow-xl lg:odd:border-r dark:shadow-stone-950/75">
              <BlogPostListEntry post={{ ...post.data, id: post.id }} />
            </li>
          ))
        }
      </ul>
      {
        page.lastPage > 1 && (
          <div class="relative w-full">
            <div class="bg-pattern absolute inset-0 -z-10 h-full" />

            <Pagination class="mx-auto" {...page} />
          </div>
        )
      }
    </section>
  </div>
</BaseLayout>
